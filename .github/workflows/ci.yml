name: ORIUM Blockchain CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run cargo check
        uses: actions-rs/cargo@v1
        env:
          CARGO_INCREMENTAL: 0
        with:
          command: check
          args: --workspace

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y clang libclang-dev cmake build-essential git pkg-config libssl-dev protobuf-compiler

      - name: Free disk space
        run: |
          rm -rf ~/.cargo/registry ~/.cargo/git
          cargo clean

      - name: Run unit tests
        uses: actions-rs/cargo@v1
        env:
          CARGO_INCREMENTAL: 0
        with:
          command: test
          args: --workspace --verbose

      - name: Run integration tests
        uses: actions-rs/cargo@v1
        env:
          CARGO_INCREMENTAL: 0
        with:
          command: test
          args: --test integration_tests --verbose

      - name: Run property tests
        uses: actions-rs/cargo@v1
        env:
          CARGO_INCREMENTAL: 0
        with:
          command: test
          args: --test property_tests --verbose

      - name: Run fuzzing tests
        uses: actions-rs/cargo@v1
        env:
          CARGO_INCREMENTAL: 0
        with:
          command: test
          args: --test fuzzing_tests --verbose

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Run cargo clippy
        uses: actions-rs/cargo@v1
        env:
          CARGO_INCREMENTAL: 0
        with:
          command: clippy
          args: --all-targets -- -D warnings

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install cargo-audit
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: cargo-audit

      - name: Run cargo audit
        uses: actions-rs/cargo@v1
        with:
          command: audit

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y clang libclang-dev cmake build-essential git pkg-config libssl-dev protobuf-compiler

      - name: Build release binary
        uses: actions-rs/cargo@v1
        env:
          CARGO_INCREMENTAL: 0
        with:
          command: build
          args: --workspace --release

      - name: Run runtime benchmarks
        uses: actions-rs/cargo@v1
        with:
          command: run
          args: --release --bin orium-node -- benchmark pallet --chain dev --pallet "*" --extrinsic "*" --steps 50 --repeat 20 --output ./benchmarks/

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: ./benchmarks/

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: orium/blockchain-node
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/devnet/Dockerfile
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  devnet-test:
    name: Devnet Integration Test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/devnet/Dockerfile
          load: true
          tags: orium-node:test
          cache-from: type=gha

      - name: Start devnet
        run: |
          cd docker/devnet
          docker-compose up -d
          sleep 60  # Wait for network to stabilize

      - name: Run devnet health checks
        run: |
          cd docker/devnet
          for i in {1..4}; do
            port=$((9932 + i))
            echo "Checking validator $i on port $port..."
            curl -f http://localhost:$port/health || exit 1
          done

      - name: Run TPS benchmark
        run: |
          cd docker/devnet
          timeout 300 ./benchmark-tps.sh || echo "Benchmark completed or timed out"

      - name: Collect logs
        if: always()
        run: |
          cd docker/devnet
          docker-compose logs > devnet-logs.txt

      - name: Upload devnet logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: devnet-logs
          path: docker/devnet/devnet-logs.txt

      - name: Stop devnet
        if: always()
        run: |
          cd docker/devnet
          docker-compose down -v

  release:
    name: Create Release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, 'release:')
    needs: [check, test, lint, security, benchmark, docker]
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y clang libclang-dev cmake build-essential git pkg-config libssl-dev protobuf-compiler

      - name: Build release binary
        uses: actions-rs/cargo@v1
        env:
          CARGO_INCREMENTAL: 0
        with:
          command: build
          args: --workspace --release

      - name: Create release archive
        run: |
          mkdir -p release
          cp target/release/orium-node release/
          cp -r docker release/
          cp README.md release/
          tar -czf orium-blockchain-release.tar.gz release/

      - name: Extract version
        id: version
        run: echo "VERSION=$(grep '^version' Cargo.toml | head -1 | cut -d'"' -f2)" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.VERSION }}
          release_name: ORIUM Blockchain v${{ steps.version.outputs.VERSION }}
          body: |
            ## ORIUM Blockchain Release v${{ steps.version.outputs.VERSION }}
            
            ### Features
            - Native ORM token with "or" address prefix
            - dUSD and dEUR stablecoins with MakerDAO-style collateralization
            - BABE + GRANDPA consensus with 2-second block time
            - High-performance runtime optimized for ≥50,000 TPS
            - Comprehensive testing suite with property-based and fuzzing tests
            - Docker Compose 4-validator devnet with monitoring
            
            ### Downloads
            - Binary: `orium-node` (Linux x86_64)
            - Docker images available on Docker Hub
            - Complete source code and documentation
            
            ### Quick Start
            ```bash
            # Extract release
            tar -xzf orium-blockchain-release.tar.gz
            cd release
            
            # Start devnet
            cd docker/devnet
            ./start-devnet.sh
            
            # Run benchmarks
            ./benchmark-tps.sh
            ```
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./orium-blockchain-release.tar.gz
          asset_name: orium-blockchain-release.tar.gz
          asset_content_type: application/gzip
